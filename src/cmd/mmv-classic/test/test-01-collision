#! /usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell

# Filename: src/cmd/mmv-classic/test/test-01-collision
# Project: libmmv
# Brief: Deliberately run mmv with patterns that would cause a collision.
#
# Copyright (C) 2016 Guy Shaw
# Written by Guy Shaw <gshaw@acm.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=pod

=begin description

## <<description>> ##

=end description

=cut

BEGIN { push(@INC, '../../../libtest'); }

require 5.0;
use strict;
use warnings;
use Carp;
use diagnostics;
use Getopt::Long;
use File::Spec::Functions qw(splitpath catfile);
use Cwd qw(getcwd);

use mmvtest;

my $debug   = 0;
my $verbose = 0;

my $program;
my $exe;
my $test_path;
my $test_name;
my $subtest;

my @options = (
    'debug'   => \$debug,
    'verbose' => \$verbose,
);

#:subroutines:#

sub snarf_file {
    my ($fname) = @_;
    my $fh;
    my $whole_file;
    my $buf;
    my $nread;

    if (!open($fh, '<', $fname)) {
        return '*** ERROR ***';
    }

    $whole_file = '';
    while (($nread = sysread($fh, $buf, 1000000000)) != 0) {
        $whole_file .= $buf;
    }

    close $fh;

    return $whole_file;
}

sub names_and_contents {
    my $all_contents = '';
    for my $fname (@_) {
        my $contents = snarf_file($fname);
        $all_contents .= $contents;
    }
    return $all_contents;
}

#:options:#

set_print_fh();

GetOptions(@options) or exit 2;

#:main:#

fresh_tmpdir();

$test_path = $0;
$test_name = sname($test_path);

$subtest = '';
$program = 'mmv';
$exe = catfile('../..', $program);

if (!chdir('tmp')) {
    eprint "chdir('tmp') failed; $!.\n";
    exit 2;
}

write_new_file('file01', "File one.\n");
write_new_file('file02', "File two.\n");
write_new_file('file03', "File three.\n");
write_new_file('pairs',
    "file01 file10\n",
    "file02 file10\n",
    "file03 file10\n",
);

my $before;
my $after;

$before = names_and_contents('file01', 'file02', 'file03');

my $err;
my $rc;

$err = 0;
my $child = fork();

if (!defined($child)) {
    eprint "fork() failed; $!\n";
    exit 2;
}

if ($child) {
    wait;
}
else {
    open(*STDIN,  '<', 'pairs');
    open(*STDOUT, '>', 'mmv.out');
    open(*STDERR, '>', 'mmv.err');
    exec($exe);
}

$rc = $?;
my $exit   = ($rc >> 8) & 0xff;
my $signal = $rc & 0xff;

print "signal=${signal}, exit=${exit}.\n";

if ($exit == 1) {
    show_file('mmv.out');
}

if (!grep_file('collision', 'mmv.out')) {
    eprint qq[expected "collision" error message.\n];
    $err = 1;
}

if (!grep_file('Nothing done\.', 'mmv.err')) {
    eprint qq[expected "nothing done" error message.\n];
    $err = 1;
}

$after = names_and_contents('file01', 'file02', 'file03');

if ($after ne $before) {
    print "Files should not have changed, but they did.\n";
    print "Before:\n";
    print '    ', $_, "\n"  for (split(/\n/, $before));
    print "After\n";
    print '    ', $_, "\n"  for (split(/\n/, $after));
    $err = 1;
}

if ($rc != 256) {
    eprint "mmv returned exit status ${exit}.\n";
    eprint "Expected status: 1\n";
    $err = 1;
}

show_test_results($test_name, 'collision', $err);

exit ($err ? 1 : 0);
