#! /usr/bin/perl -w
    eval 'exec /usr/bin/perl -S $0 ${1+"$@"}'
        if 0; #$running_under_some_shell

# Filename: src/cmd/mmv-classic/test/test-04-backrefs
# Project: libmmv
# Brief: Test to see if wildcards and back-references are handled correctly.
#
# Copyright (C) 2016 Guy Shaw
# Written by Guy Shaw <gshaw@acm.org>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

=pod

=begin description

libmmv: Test to see if wildcards and back-references are handled correctly.

=end description

=cut

BEGIN { push(@INC, '../../../libtest'); }

require 5.0;
use strict;
use warnings;
use Carp;
use diagnostics;
use Getopt::Long;
use File::Spec::Functions qw(splitpath catfile);
use Cwd qw(getcwd);

use mmvtest;

my $debug   = 0;
my $verbose = 0;

my $program;
my $exe;
my $test_path;
my $test_fname;
my $subtest;

my @options = (
    'debug'   => \$debug,
    'verbose' => \$verbose,
);

#:options:#

set_print_fh();

GetOptions(@options) or exit 2;

#:main:#

fresh_tmpdir();

$test_path = $0;
$test_fname = sname($test_path);

$subtest = '';
$program = 'mmv';
$exe = catfile('../..', $program);

if (!chdir('tmp')) {
    eprint "chdir('tmp') failed; $!.\n";
    exit 2;
}

$test_fname = 'file-123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
my $err;
my $rc;

write_new_file($test_fname, "Test\n");

my $d = "[0-9]" x 9;
my $a = "[A-Z]" x 26;
my $backrefs_d = join("", map { "#$_" } (1 .. 9));
my $backrefs_a = join("", map { "#l$_" } (10 .. 35));
my $backrefs = $backrefs_d . $backrefs_a;
write_new_file('pairs', "file-${d}${a} file-${backrefs}\n");

$err = 0;
my $child = fork();

if (!defined($child)) {
    eprint "fork() failed; $!\n";
    exit 2;
}

if ($child) {
    wait;
}
else {
    open(*STDIN,  '<', 'pairs');
    open(*STDOUT, '>', 'mmv.out');
    open(*STDERR, '>', 'mmv.err');
    exec($exe);
}

$rc = $?;
my $exit   = ($rc >> 8) & 0xff;
my $signal = $rc & 0xff;

print "signal=${signal}, exit=${exit}.\n";

show_file('mmv.out');

if (-f lc($test_fname) && ! -e $test_fname) {
    print
        "Test file was moved as expected for newer versions of mmv\n",
        "with unlimited wildcards.\n";
    system('ls', '-lh');
    exit 0;
}

if (! -f $test_fname) {
    print "Test file was moved or deleted.\n";
    print "That should not have happened.\n";
    system('ls', '-lh');
    $err = 1;
}

if (!grep_file(' : too many wildcards\.', 'mmv.out')) {
    eprint qq[expected "too many wildcards" error message.\n];
    $err = 1;
}

if ($rc != 256) {
    eprint "mmv returned exit status ${exit}.\n";
    eprint "Expected status: 1\n";
    $err = 1;
}

if ($err == 0) {
    print
        "mmv refused to move because there were too many wildcards,\n",
        "as expect for earlier versions of mmv with limited wildcards.\n";
}

show_test_results($test_fname, 'too many backrefs', $err);

exit ($err ? 1 : 0);
